
## üß† Problem Understanding (in Simple Words)

We are given a table named `Logs`:

| id | num |
| -- | --- |
| 1  | 1   |
| 2  | 1   |
| 3  | 1   |
| 4  | 2   |
| 5  | 1   |
| 6  | 2   |
| 7  | 2   |

We have to **find all numbers (`num`) that appear at least 3 times in a row consecutively** ‚Äî meaning, **no breaks** between them.

So we look row by row:

* `1, 1, 1` ‚Üí three 1‚Äôs in a row ‚úÖ
* `2` appears only two times consecutively ‚Üí ‚ùå

So the output is:

| ConsecutiveNums |
| --------------- |
| 1               |

---

## üîç Step-by-Step Thought Process

We want to **check each row** and see if **the same number appears in the next two rows** also.

That means we are comparing like this:

| Row  | Current | Next Row | 2nd Next Row   | Condition          |
| ---- | ------- | -------- | -------------- | ------------------ |
| id=1 | 1       | 1        | 1              | ‚úÖ (3 same numbers) |
| id=2 | 1       | 1        | 2              | ‚ùå                  |
| id=3 | 1       | 2        | 1              | ‚ùå                  |
| id=4 | 2       | 1        | 2              | ‚ùå                  |
| id=5 | 1       | 2        | 2              | ‚ùå                  |
| id=6 | 2       | 2        | (no next next) | ‚ùå                  |

Only the first condition passes for number 1.

---

## üßÆ SQL Logic Behind It

We can solve this by **joining the table with itself** (self-join).
This lets us compare each row with its next and next-next rows.

---

## üíª Final SQL Query

```sql
SELECT DISTINCT l1.num AS ConsecutiveNums
FROM Logs l1
JOIN Logs l2 ON l1.id = l2.id - 1
JOIN Logs l3 ON l1.id = l3.id - 2
WHERE l1.num = l2.num
  AND l2.num = l3.num;
```

---

## üßæ Step-by-Step Explanation (Beginner Friendly)

| Step                                        | SQL Part                                                                            | What it does |
| ------------------------------------------- | ----------------------------------------------------------------------------------- | ------------ |
| `FROM Logs l1`                              | Take the table and call it `l1` (the current row).                                  |              |
| `JOIN Logs l2 ON l1.id = l2.id - 1`         | Join the table with itself, matching the next row (`l2` is one step ahead of `l1`). |              |
| `JOIN Logs l3 ON l1.id = l3.id - 2`         | Join again, this time for the row two steps ahead (`l3`).                           |              |
| `WHERE l1.num = l2.num AND l2.num = l3.num` | Keep only the rows where all three numbers match (i.e., appear consecutively).      |              |
| `SELECT DISTINCT l1.num AS ConsecutiveNums` | Show each number only once (even if it appears more than once consecutively).       |              |

---

## üî¢ Dry Run with Example Data

Let‚Äôs see how SQL compares row by row üëá

| l1.id | l1.num | l2.id | l2.num | l3.id | l3.num | Condition     |
| ----- | ------ | ----- | ------ | ----- | ------ | ------------- |
| 1     | 1      | 2     | 1      | 3     | 1      | ‚úÖ (1 = 1 = 1) |
| 2     | 1      | 3     | 1      | 4     | 2      | ‚ùå             |
| 3     | 1      | 4     | 2      | 5     | 1      | ‚ùå             |
| 4     | 2      | 5     | 1      | 6     | 2      | ‚ùå             |
| 5     | 1      | 6     | 2      | 7     | 2      | ‚ùå             |
| 6     | 2      | 7     | 2      | ‚Äî     | ‚Äî      | ‚ùå             |

‚úÖ Only the first row (id=1) satisfies the condition.

---

## ‚úÖ Final Output

| ConsecutiveNums |
| --------------- |
| 1               |

---

## üß© Summary

* **Concept:** Check 3 consecutive rows with same number.
* **Technique:** Self join table 3 times.
* **SQL Tools Used:**

  * `JOIN` (self join)
  * `DISTINCT`
  * `WHERE` (for matching condition)

---

Would you like me to show a **visual diagram** of how the self-join happens (like how `l1`, `l2`, `l3` connect row by row)? It helps a lot to ‚Äúsee‚Äù what‚Äôs happening.
