
## ðŸ”¹ Problem Breakdown

Table: **Transactions**
Columns:

* `id` â†’ unique transaction id
* `country` â†’ kis country me transaction hua
* `state` â†’ "approved" ya "declined"
* `amount` â†’ transaction ka amount
* `trans_date` â†’ kis date pe hua

---

## ðŸ”¹ Jo Output me chahiye

Har **month + country** ke liye:

1. **trans\_count** â†’ total transactions count
2. **approved\_count** â†’ sirf approved transactions count
3. **trans\_total\_amount** â†’ total amount of all transactions
4. **approved\_total\_amount** â†’ sirf approved transactions ka total

Aur `month` ko format karna hai `YYYY-MM` ke form me.

---

## ðŸ”¹ SQL Query

```sql
SELECT 
    DATE_FORMAT(trans_date, '%Y-%m') AS month,
    country,
    COUNT(*) AS trans_count,
    SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count,
    SUM(amount) AS trans_total_amount,
    SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount
FROM Transactions
GROUP BY month, country;
```

---

## ðŸ”¹ Query Explanation

1. **`DATE_FORMAT(trans_date, '%Y-%m')`**

   * Date ko `YYYY-MM` month format me convert karne ke liye.
   * Example: `2018-12-18` â†’ `2018-12`

2. **`COUNT(*)`**

   * Total transactions count karne ke liye.

3. **`SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END)`**

   * Approved transactions count karta hai.
   * Agar `state = 'approved'` hai â†’ 1 add karega, warna 0.

4. **`SUM(amount)`**

   * Sabhi transactions ka total amount.

5. **`SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END)`**

   * Sirf approved transactions ka total amount.

6. **`GROUP BY month, country`**

   * Har month aur country ke combination ke liye alag-alag result.

---

## ðŸ”¹ Example Dry Run

Input:

```
| id  | country | state    | amount | trans_date  |
|-----|---------|----------|--------|-------------|
| 121 | US      | approved | 1000   | 2018-12-18  |
| 122 | US      | declined | 2000   | 2018-12-19  |
| 123 | US      | approved | 2000   | 2019-01-01  |
| 124 | DE      | approved | 2000   | 2019-01-07  |
```

ðŸ‘‰ Grouping by `2018-12, US`:

* trans\_count = 2 (id 121,122)
* approved\_count = 1 (id 121)
* trans\_total\_amount = 3000
* approved\_total\_amount = 1000

ðŸ‘‰ Grouping by `2019-01, US`:

* trans\_count = 1 (id 123)
* approved\_count = 1
* trans\_total\_amount = 2000
* approved\_total\_amount = 2000

ðŸ‘‰ Grouping by `2019-01, DE`:

* trans\_count = 1 (id 124)
* approved\_count = 1
* trans\_total\_amount = 2000
* approved\_total\_amount = 2000

âœ… Output matches exactly.

---

Bhai, ab tu chaahe to mai isko **step-by-step aggregation table** ke form me bhi bana kar dikha sakta hoon (intermediate result ke sath). Kya mai wo bana du?
